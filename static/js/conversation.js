/*
DOCUMENTATION GENERATED BY AI

This JavaScript code is responsible for handling the submission of a message form on a web page. It is designed to work with Django and utilizes jQuery for DOM manipulation and AJAX for asynchronous form submission.

Main Purpose and Functionality:
- Prevent the default form submission behavior when the form with the id 'submit-form' is submitted.
- Retrieve the value of the 'message' input field and reset it to an empty string.
- Send the 'message' data via an AJAX POST request to the Django server at the specified 'submit_message' URL.
- Ensure compatibility with Django's CSRF protection by including the 'csrfmiddlewaretoken' value in the data payload.
- On successful submission, the provided 'success' function can be used to perform additional actions on the client-side (currently empty).

Related Files and Dependencies:
- Ensure that jQuery is included in the project, as it is required for this code to function.
- The Django template should have a form element with an id of 'submit-form' and an input field with an id of 'message'.
- A Django URL named 'submit_message' should exist to handle the submitted data on the server-side.

Key Implementation Details:
- The majority of the functionality happens inside the $(document).ready() function, which ensures that the code is executed once the DOM is fully loaded.
- The 'submit-form' form element is targeted using its id and a submit event listener is attached to it.
- The event object (e) is used to call the preventDefault() method, which stops the default form submission behavior (i.e., a full page reload).
- The AJAX request is configured with the 'POST' method, the target URL, the data payload, and the success callback function.

Additional Information:
- To add functionality upon successful message submission, provide a custom implementation inside the 'success' function of the AJAX request.
- Please ensure that the required dependencies (jQuery and Django) are properly set up and configured within the project.
- It is important to maintain the proper naming conventions and structure mentioned in the 'Related Files and Dependencies' section for this code to work correctly.


Copyright 2023, Joe Crowley, All rights reserved.
*/
$(document).ready(function() {
    $("#submit-form").submit(function(e) {
        e.preventDefault();
        var message = $("#message").val();
        $("#message").val("");
        $.ajax({
            type: "POST",
            url: "{% url 'submit_message' %}",
            data: {
                message: message,
                csrfmiddlewaretoken: $('input[name=csrfmiddlewaretoken]').val()
            },
            success: function(response) {
            }
        });
    });
});

